// 2.4Car.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include<opencv2/legacy/blobtrack.hpp>
#include "opencv2/core/core_c.h"
#include<iostream>  
#include <opencv2/core/core.hpp>  
#include <opencv2/highgui/highgui.hpp>  
#include <stdio.h>
#include <highgui.h>
#include<cv.h>
using namespace std;
using namespace cv;


class MyFGDetector :public CV_EXPORTS CvFGDetector{
public :
	MyFGDetector();//构造函数，初始化
	MyFGDetector(double alpha, double threshold);//??????????????????????????????????????????
	~MyFGDetector();

	IplImage* GetMask();
	void Process(IplImage* pFrame);
	CvHistogram* Getthist();
	void HistProcess(CvMat* HistoMat);//???claim but not define
	int OSTUthred(CvHistogram*Histogram1);

	void Release();
protected:
	int frameNum;//视屏帧计数
	double alpha;//背景图像权值更新
	double threshold;//二值化阀值
	CvHistogram* MyHistogram;//创建直方图
	IplImage*pFrame;//当前帧图像8位3通道
	IplImage*pFGMask;//前景图像
	IplImage*pBKMask;//输出的背景图像
	IplImage*frame;
	IplImage*frame1;//输出的背景检测图像
	CvMat*pFrameMat;//当前帧转换而成的32位浮点单通道矩阵
	CvMat*pFGMat;//前景图32位浮点单通道矩阵
	CvMat*pBkfirstMat;
	CvMat*pBkMat;//背景图32位浮点单通道矩阵
	CvMat*pBKTempMat;
	CvHistogram*Histogram1;
	IplImage* HistoImage;
	void Create(double alpha, double threshold);
};
//前景检测处理
void MyFGDetector::Process(IplImage*pFrame)
{

	int HistogramBins = 256;
	float HistogramRange1[2] = { 0, 255 };
	float *HistogramRange[1] = { &HistogramRange1[0] };
	if (frameNum == 0)
	{
		pFGMask = cvCreateImage(cvGetSize(pFrame), IPL_DEPTH_8U, 1);
		pBKMask = cvCreateImage(cvGetSize(pFrame), IPL_DEPTH_8U, 1);
		frame = cvCreateImage(cvGetSize(pFrame), IPL_DEPTH_8U, 1);
		frame1 = cvCreateImage(cvGetSize(pFrame), IPL_DEPTH_8U, 1);
		pBkMat = cvCreateMat(pFrame->height, pFrame->width, CV_32FC1);
		pFGMat = cvCreateMat(pFrame->height, pFrame->width, CV_32FC1);
		pFrameMat = cvCreateMat(pFrame->height, pFrame->width, CV_32FC1);
		pBKTempMat = cvCreateMat(pFrame->height, pFrame->width, CV_32FC1);
		pBkfirstMat = cvCreateMat(pFrame->height, pFrame->width, CV_32FC1);
		cvSetZero(pBkfirstMat);

		HistoImage = cvCreateImage(cvGetSize(pFrame), IPL_DEPTH_8U, 1);
		MyHistogram = cvCreateHist(1, &HistogramBins, CV_HIST_ARRAY, HistogramRange);//创建1维直方图
		if (!pFGMask || !pBkMat || !pFrameMat || !pBKMask)
		{//或运算判断 初始化不成功的处理
			fprintf(stderr, "can not alloe memeory.\n");//By default, standard input is read from the keyboard, while standard output and standard error are printed to the screen
			return;
		}
		cvCvtColor(pFrame, pFGMask, CV_RGB2GRAY);
		cvCvtColor(pFrame, pBKMask, CV_BGR2GRAY);
		cvConvert(pFGMask, pFrameMat);//convert src to dst
		cvConvert(pFGMask, pFGMat);
		cvConvert(pBKMask, pBkMat);//mask to mat
	}
	cvCvtColor(pFrame, pFGMask, CV_RGB2GRAY);//present flame gray
	cvConvert(pFGMask, pFrameMat);//gray mskt to mat
	cvSmooth(pFrameMat, pFrameMat, CV_MEDIAN, 3, (0.0), (0.0));//median filter /* Smoothes array (removes noise) */    CV_BLUR_NO_SCALE =0,	CV_BLUR = 1,CV_GAUSSIAN = 2,CV_MEDIAN = 3,CV_BILATERAL = 4

	if (frameNum < 50){
		cvAddWeighted(pBkfirstMat, 1.0, pFrameMat, 0.02, 0.0, pBkfirstMat);///* dst = src1 * alpha + src2 * beta + gamma */
	}
	if (frameNum == 50){
		cvCopy(pBkfirstMat, pBkMat);
	}
	cvAbsDiff(pFrameMat, pBkMat, pFGMat);//* dst(x,y,c) = abs(src1(x,y,c) - src2(x,y,c)) */
	MyFGDetector::HistProcess(pFGMat);
	MyHistogram = Getthist();
	threshold = MyFGDetector::OSTUthred(MyHistogram);
	if (threshold < 20){
		threshold = 20;
	}
	IplConvKernel * myModel;
	myModel = cvCreateStructuringElementEx(5, 5, 2, 2, CV_SHAPE_RECT);//自定义5*5,参考点（3,3）的矩形模板 CV_SHAPE_RECT;CV_SHAPE_CROSS;CV_SHAPE_RECT;CV_SHAPE_ELLIPSE;CV_SHAPE_CUSTOM;
	cvThreshold(pFGMat, pFGMask, threshold, 255.0, CV_THRESH_BINARY);//bianry the front pic
	cvErode(pFGMask, pFGMask, myModel, 1);//the third parameter is the erode modle, by default is 3x3 rect . it can be redifined by iplconvkernel
	cvDilate(pFGMask, pFGMask, myModel, 1);
	if (frameNum > 50){
		//cvRenewBKImage(pFGMat, pFrameMat, pBKTempMat);
		cvRunningAvg(pBKTempMat, pBkMat, alpha, 0);/* Adds image to accumulator with weights: acc = acc*(1-alpha) + image*alpha */
		frameNum++;
	}
}
//临界阀值计算
int MyFGDetector::OSTUthred(CvHistogram* MyHistogram){
		float histArray[256];
		for (int j = 0; j < 256; j++){
			histArray[j] = cvQueryHistValue_1D(MyHistogram, j);//bins=j 的hist的value j点的纵坐标值
		}
		histArray[0] = 1;
		float u0, u1;//c0,c1组的均值
		float w0, w1;//c0,c1组产生的概率
		int count0;//c0组的像素数目
		int t, maxT;//阀值t以及记录方差最大值是的最佳阀值maxT
		float devi, maxDevi = 0;//方差及最大方差
		int i;
		int sum = 0;//统计直方图中像素的数目存放在sum中
		for (i = 0; i < 256; i++){
			sum = sum + histArray[i];
		}
		for (t = 0; t < 256; t++){
			u0 = 0;
			count0 = 0;//计算阀值为t 时的c0的均值和产生的概率
			for (i = 0; i <= t; i++){
				u0 += i*histArray[i];
				count0 += histArray[i];
			}
			u0 = u0 / count0;
			w0 = (float)count0 / sum;

			//计算阀值为t时的c1组的均值和概率
			u1 = 0;
			for (i = t + 1; i < 256; i++){
				u1 += i*histArray[i];
			}
			//c0与c1组相熟之和为图像的总像素
			u1 = u1 / (sum - count0);
			w1 = 1 - w0;
			devi = w0*w1*(u1 - u0)*(u1 - u0);
			if (devi > maxDevi){
				maxDevi = devi;
				maxT = t;
			}
		}
		return maxT;
	}

	int _tmain(int argc, _TCHAR* argv[])
{
	return 0;
}

